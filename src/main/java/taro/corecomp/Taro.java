package taro.corecomp;

import taro.command.Command;
import taro.ui.Ui;

/**
 * The main entry point of the Taro application.
 * <p>
 * The {@code Taro} class is responsible for initializing the core components
 * ({@link Ui}, {@link Storage}, and {@link TaskList}), and running the
 * main program loop that repeatedly reads user input, parses it into
 * {@link Command} objects via the {@link Parser}, and executes them.
 * </p>
 *
 * <p>It also handles errors thrown during command execution and displays
 * appropriate error messages to the user.</p>
 */
public class Taro {

    private final Ui ui;
    private Storage storage;
    private TaskList tasks;

    /**
     * Constructs a new {@code Taro} instance using the specified file path
     * to initialize the {@link Storage}.
     *
     * @param filePath the path to the file where tasks are loaded from and saved to
     */
    public Taro(String filePath) {
        //Initialize the UI
        this.ui = new Ui();
        this.storage = new Storage(filePath);
        try {
            this.tasks = new TaskList(storage.load());
        } catch (Exception e) {
            ui.showLoadingError(e.getMessage());
            this.tasks = new TaskList();
        }
    }

    public Ui getUi() {
        return this.ui;
    }

    /**
     * Starts the main loop of the application.
     *
     * The loop will continuously read user commands via {@link Ui},
     * parse them using {@link Parser}, and execute them as {@link Command}s
     * until an exit command (e.g., {@code bye}) is issued.
     */
    public void run() {

        ui.showWelcome();

        boolean isEnd = false;

        while (!isEnd) {
            String input = ui.readCommand();

            try {
                Command c = Parser.parseCommand(input);
                isEnd = c.execute(tasks, ui, storage);
            } catch (TaroException e) {
                System.out.println("    " + e.getMessage());
            }
        }
    }

    /**
     * Processes the given user input, executes the corresponding {@link Command},
     * and returns the response generated by Taro.
     * Internally, this method parses the input string into a {@code Command}
     * using {@link Parser#parseCommand(String)}, executes the command with the
     * current task list, UI, and storage, and finally collects the accumulated
     * output messages from the {@link Ui}.
     *
     * @param input the raw user input string
     * @return the response message(s) produced by executing the command;
     *         if an error occurs, returns the error message instead
     */
    public String getResponse(String input) {
        try {
            Command c = Parser.parseCommand(input);
            c.execute(tasks, ui, storage);
            return ui.consumeBuffer(); // 返回收集的所有输出
        } catch (TaroException e) {
            return e.getMessage();
        }
    }

    public static void main(String[] args) {
        //Input from user
        new Taro("data/taro.txt").run();
    }
}
